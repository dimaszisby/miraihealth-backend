// src/models/metric.ts

import { Model, DataTypes, Sequelize, Optional } from "sequelize";
import { MetricCategory } from "./metric-category.js";
import { MetricSettings } from "./metric-settings.js";
import { MetricLog } from "./metric-log.js";

/**
 * * Metric Model
 * Represents health metrics tracked by users.
 */

// Define attributes
export interface MetricAttributes {
  id: string;
  userId: string;
  categoryId?: string | null;
  originalMetricId?: string | null;
  name: string;
  description?: string | null;
  defaultUnit: string;
  isPublic: boolean;
  deletedAt?: Date | null;

  // Optional associated objects
  MetricCategory?: MetricCategory;
  MetricSettings?: MetricSettings;
  MetricLogs?: MetricLog[];
}

// Define optional fields for Sequelize
// Ommit the id field because it's autogenerated
export interface MetricCreationAttributes
  extends Optional<MetricAttributes, "id"> {}

export class Metric
  extends Model<MetricAttributes, MetricCreationAttributes>
  implements MetricAttributes
{
  declare id: string;
  declare userId: string;
  declare categoryId?: string | null;
  declare originalMetricId?: string | null;
  declare name: string;
  declare description?: string | null;
  declare defaultUnit: string;
  declare isPublic: boolean;
  declare deletedAt?: Date | null;

  // Optional associated objects
  declare MetricCategory?: MetricCategory;
  declare MetricSettings?: MetricSettings;
  declare MetricLogs?: MetricLog[];
  /**
   * * Associations
   */
  public static associate(models: any) {
    Metric.belongsTo(models.User, {
      foreignKey: "userId",
      as: "User",
      onDelete: "SET NULL",
    });
    Metric.belongsTo(models.MetricCategory, {
      as: "MetricCategory",
      foreignKey: "categoryId",
      onDelete: "SET NULL",
    });
    Metric.belongsTo(models.Metric, {
      as: "OriginalMetric",
      foreignKey: "originalMetricId",
      onDelete: "SET NULL",
    });
    Metric.hasOne(models.MetricSettings, {
      as: "MetricSettings",
      foreignKey: "metricId",
      onDelete: "CASCADE",
    });
    Metric.hasMany(models.MetricLog, {
      as: "MetricLogs",
      foreignKey: "metricId",
      onDelete: "CASCADE",
    });
  }
}

/**
 * * Initialize Metric Model
 */
export default (sequelize: Sequelize) => {
  Metric.init(
    {
      id: {
        type: DataTypes.UUID,
        defaultValue: DataTypes.UUIDV4,
        primaryKey: true,
      },
      userId: {
        type: DataTypes.UUID,
        allowNull: false,
        references: {
          model: "users",
          key: "id",
        },
      },
      categoryId: {
        type: DataTypes.UUID,
        allowNull: true,
        references: {
          model: "metric_categories",
          key: "id",
        },
      },
      originalMetricId: {
        type: DataTypes.UUID,
        allowNull: true,
        references: {
          model: "metrics",
          key: "id",
        },
      },
      name: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      description: {
        type: DataTypes.STRING,
        allowNull: true,
      },
      defaultUnit: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      isPublic: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: true,
      },
      deletedAt: {
        type: DataTypes.DATE,
        allowNull: true,
      },
    },
    {
      sequelize,
      modelName: "Metric",
      tableName: "metrics",
      paranoid: true,
      underscored: true,
      schema: "public",
    }
  );

  return Metric;
};
